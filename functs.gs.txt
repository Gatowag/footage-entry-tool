// ░░░░░░░░░▓ COMMON VARIABLES SCOPED GLOBALLY
const ss = SpreadsheetApp.getActiveSpreadsheet();
const ws = ss.getSheetByName("Production Order");
const rangeOffset = 810;
var prodOffset = -1;
var dataArray = {
                unfinished: [],
                locations: [],
                allLabels: [],
                };



// ░░░░░░░░░▓ WRITES DATA TO SPREADSHEET
function addNewRow(rowData) {

  const rowPt1 = [
                  rowData.dateRecorded,
                  determineProdNum(rowData.type,rowData.cont,rowData.toggledLabel),
                ];
  const rowPt2 = rowData.videoCardsData;
  const rowPt3 = [
                  rowData.audioCard,
                  rowData.duration,
                  rowData.toggledLabel,
                  determinePt(rowData.type,rowData.cont,rowData.toggledLabel),
                  ,
                  ,
                  ,
                  ,
                  ,
                  rowData.property,
                  rowData.room
                ];
  const rowPt4 = rowData.crew;
  const rowCombined = rowPt1.concat(rowPt2,rowPt3,rowPt4);

  ws.appendRow(rowCombined);
  setBackgroundColor(rowData.type);
  setNumberFormat();
  mergeCells(rowData.videoCardsLength,rowData.type);
  return true;
}


// ░░░░░░░░░▓ READS FOOTAGE LABELS FROM SPREADSHEET,
// ░░░░░░░░░▓ FILTERS TO ONLY "UNFINISHED" ENTRIES AND RETURNS THOSE TITLES
// ░░░░░░░░░▓ IN AN ARRAY WHEN THE FUNCTION IS CALLED IN ENTRYFORM
function getSpreadsheetData(){
  const lastRow = ws.getLastRow();
  const labelRange = ws.getRange(rangeOffset,12,lastRow - (rangeOffset-1),1);
  const locationRange = ws.getRange(810,19,lastRow - (810-1),2);

  for ( i = 0; i < ((lastRow + 1) - rangeOffset); i++){
    if (labelRange.getBackgrounds()[i] == "#ffff00")
      { dataArray.unfinished.push(labelRange.getValues()[i]) };

    if (locationRange.getValues()[i] != "")
      { dataArray.locations.push(locationRange.getValues()[i]); };
  }

  return dataArray;
}

// ░░░░░░░░░▓ DETERMINES PROD NUMBER
function determineProdNum(type,cont,label){
  const lastRow = ws.getLastRow();
  const prodNumRange = ws.getRange(rangeOffset,2,lastRow - (rangeOffset - 1),1);
  const labelRange = ws.getRange(rangeOffset,12,lastRow - (rangeOffset-1),1);
  var prodArray = [];
  var prodNumIndex = [];
  var mostRecentNum;

  for ( i = 0; i < ((lastRow + 1)  - rangeOffset); i++){
    if (prodNumRange.getValues()[i] != "" && prodNumRange.getValues()[i] != "-")
      { prodArray.push(Number(prodNumRange.getValues()[i])); };

    if (labelRange.getValues()[i] != "")
      { dataArray.allLabels.push(String(labelRange.getValues()[i])) };

    prodNumIndex.push(Number(prodNumRange.getValues()[i]));
  };

  if (type == 1) {
    mostRecentNum = Math.max(...prodArray) + 1;
    prodOffset++;
    return mostRecentNum + prodOffset;
  } else if (type == 2) {
      if (cont === "NEW"){
        mostRecentNum = Math.max(...prodArray) + 1;
        prodOffset++;
        return mostRecentNum + prodOffset;
      } else if (cont === "CONT") {
        return prodNumIndex[dataArray.allLabels.indexOf(label)];
      }
  } else if (type == 3){
    return prodNumIndex[dataArray.allLabels.indexOf(label)];
  } else {
    return "-";
  }
}

// ░░░░░░░░░▓ DETERMINES PART NUMBER
function determinePt(type,cont,label){
  const lastRow = ws.getLastRow();
  const labelRange = ws.getRange(rangeOffset,12,lastRow - (rangeOffset-1),1);
  const ptRange = ws.getRange(rangeOffset,13,lastRow - (rangeOffset - 1),1);
  var ptIndex = [];
  var labelList = [];

  for ( i = 0; i < ((lastRow + 1)  - rangeOffset); i++){
    if (labelRange.getValues()[i] != "")
      { labelList.push(String(labelRange.getValues()[i])) };

    ptIndex.push(Number(ptRange.getValues()[i]));
  };

  console.log(ptIndex[labelList.lastIndexOf("finish this fake episode!")] + 1);

  if (type == 3) {
      return ptIndex[labelList.lastIndexOf(label)] + 1;
  } else if (type == 2) {
      if (cont === "CONT"){
        return ptIndex[labelList.lastIndexOf(label)] + 1;
      } else if (cont === "NEW") {
        return "1";
      }
  } else {
    return "";
  }
}

// ░░░░░░░░░▓ FORMATS THE COLOR OF THE NEW ROW BASED ON FOOTAGE TYPE
function setBackgroundColor(type) {
  const newRow = ws.getLastRow();

  if(type == "1"){
    ws.setActiveSelection(newRow + ":" + newRow).setBackground("#f1c232").setFontColor("black");
  } else if(type == "2"){
    ws.setActiveSelection(newRow + ":" + newRow).setBackground("#ffff00").setFontColor("black");
  } else if(type == "3"){
    ws.setActiveSelection(newRow + ":" + newRow).setBackground("#e69138").setFontColor("black");
  } else if(type == "5"){
    ws.setActiveSelection(newRow + ":" + newRow).setBackground("#3c4043").setFontColor("white");
  } else {
    ws.setActiveSelection(newRow + ":" + newRow).setBackground("#f9cb9c").setFontColor("black");
  }
}

// ░░░░░░░░░▓ FORMATS APRX. TIME CELL TO SHOW H:MM:SS FROM UNFORMATTED NUMBER INPUT
function setNumberFormat() {
  const newRow = ws.getLastRow();
  const cell = ws.getRange("K" + newRow);

  cell.setNumberFormat("0:00:00");
}

// ░░░░░░░░░▓ MERGES UNUSED CELLS
function mergeCells(length,type) {
  const newRow = ws.getLastRow();
  var mergeEnd;

  // THIS APPLIES TO THE VIDEO MEMORY CARD SECTION
    if(length == "0"){
      mergeEnd = "I";
    } else if(length == "1"){
      mergeEnd = "H";
    } else if(length == "2"){
      mergeEnd = "G";
    } else if(length == "3"){
      mergeEnd = "F";
    } else if(length == "4"){
      mergeEnd = "E";
    } else if(length == "5"){
      mergeEnd = "D";
    } else if(length == "6"){
      mergeEnd = "C";
    } else {
      mergeEnd = "C";
    };

    ws.getRange('C' + newRow + ':' + mergeEnd + newRow).merge();
  
  // THIS APPLIES TO THE "PT" COLUMN
    if(type == "2" || type == "3"){
    } else {
    ws.getRange('L' + newRow + ':' + 'M' + newRow).merge();
    };
}